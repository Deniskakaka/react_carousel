{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","listimage","itemWidth","frameSize","step","infinite","animationDuration","useState","countStep","setCountStep","copyListImages","setCopyListImages","width","translate","transition","styleObject","setStyleObject","useEffect","slice","length","setTimeout","changeTranslate","prev","infiniteSteps","Math","floor","className","style","map","el","index","src","alt","type","onClick","App","state","images","FrameSize","this","htmlFor","name","id","value","onChange","event","setState","target","checked","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e504f719.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  listimage: string[]\n  itemWidth: number,\n  frameSize: number,\n  step: number,\n  infinite: boolean,\n  animationDuration: number,\n};\n\nconst Carousel: React.FC<Props> = ({\n  listimage, itemWidth, frameSize, step, infinite, animationDuration,\n}) => {\n  const [countStep, setCountStep] = useState<number>(0);\n  const [copyListImages, setCopyListImages]\n    = useState<string[]>([]);\n  const [styleObject, setStyleObject] = useState(\n    {\n      width: frameSize * itemWidth,\n      translate: itemWidth * -2,\n      transition: `all ${animationDuration / 1000}s ease`,\n    },\n  );\n\n  useEffect(() => {\n    if (infinite) {\n      setCopyListImages([\n        ...listimage.slice(listimage.length - step, listimage.length),\n        ...listimage,\n        ...listimage.slice(0, step),\n      ]);\n    } else {\n      setCopyListImages(listimage);\n    }\n  }, [infinite]);\n\n  useEffect(() => {\n    if (infinite) {\n      setStyleObject({\n        ...styleObject,\n        width: frameSize * itemWidth,\n        translate: itemWidth * -step,\n        transition: `all ${animationDuration / 1000}s ease`,\n      });\n    } else {\n      setStyleObject({\n        ...styleObject,\n        width: frameSize * itemWidth,\n        translate: 0,\n        transition: `all ${animationDuration / 1000}s ease`,\n      });\n    }\n\n    setCountStep(0);\n  }, [itemWidth, frameSize, step, infinite, animationDuration]);\n\n  useEffect(() => {\n    if (styleObject.translate > 0 && infinite) {\n      setTimeout(() => {\n        setStyleObject({\n          ...styleObject,\n          translate: (listimage.length - 1) * -itemWidth,\n          transition: '',\n        });\n      }, 0);\n    }\n\n    if (styleObject.translate <= -(listimage.length * itemWidth) && infinite) {\n      setTimeout(() => {\n        setStyleObject({\n          ...styleObject,\n          translate: itemWidth * -1,\n          transition: '',\n        });\n      }, 0);\n    }\n\n    if (\n      (styleObject.translate !== 0\n      && styleObject.transition === '')\n      || (styleObject.translate !== -(listimage.length * itemWidth)\n      && styleObject.transition === '')) {\n      setTimeout(() => {\n        setStyleObject({\n          ...styleObject,\n          transition: `all ${animationDuration / 1000}s ease`,\n        });\n      }, animationDuration / 10);\n    }\n  }, [styleObject, infinite, animationDuration]);\n\n  const changeTranslate = (prev: boolean) => {\n    if (infinite) {\n      const infiniteSteps = prev\n        ? styleObject.translate + (step * itemWidth)\n        : styleObject.translate - (step * itemWidth);\n\n      setStyleObject({\n        ...styleObject,\n        translate: infiniteSteps,\n      });\n    } else if (!infinite) {\n      if (countStep && prev) {\n        setStyleObject({\n          ...styleObject,\n          translate: styleObject.translate + (step * itemWidth),\n        });\n        setCountStep(countStep - 1);\n      }\n\n      if (countStep < Math.floor(copyListImages.length / step) && !prev) {\n        setStyleObject({\n          ...styleObject,\n          translate: styleObject.translate - (step * itemWidth),\n        });\n        setCountStep(countStep + 1);\n      }\n    }\n  };\n\n  return (\n    <div className=\"Carousel\" style={{ width: `${styleObject.width}px` }}>\n      <ul\n        className=\"Carousel__list\"\n        style={{ translate: `${styleObject.translate}px`, transition: `${styleObject.transition}` }}\n      >\n        {copyListImages\n          .map((el: string, index: number) => (\n            <li key={`${index + 1}`}>\n              <img src={el} alt={`${index}`} style={{ width: `${itemWidth}px` }} />\n            </li>\n          ))}\n      </ul>\n\n      <button\n        type=\"button\"\n        onClick={() => {\n          changeTranslate(true);\n        }}\n      >\n        Prev\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          changeTranslate(false);\n        }}\n      >\n        Next\n      </button>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  itemWidth: number,\n  FrameSize: number,\n  step: number\n  infinite: boolean,\n  animationDuration: number\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: 130,\n    FrameSize: 3,\n    step: 3,\n    infinite: true,\n    animationDuration: 300,\n  };\n\n  render() {\n    const {\n      images, itemWidth, FrameSize, step, infinite, animationDuration,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1>\n          Carousel with\n          {' '}\n          {images.length}\n          {' '}\n          images\n\n        </h1>\n\n        <Carousel\n          listimage={images}\n          itemWidth={itemWidth}\n          frameSize={FrameSize}\n          step={step}\n          infinite={infinite}\n          animationDuration={animationDuration}\n        />\n\n        <div className=\"Managment\">\n          <label htmlFor=\"ItemWidth\">\n            <span>width elements</span>\n            <input\n              type=\"text\"\n              name=\"ItemWidth\"\n              id=\"ItemWidth\"\n              value={this.state.itemWidth}\n              onChange={\n                (event) => this.setState({ itemWidth: +event.target.value })\n              }\n            />\n          </label>\n          <label htmlFor=\"FrameSize\">\n            <span>Frame Size</span>\n            <input\n              type=\"text\"\n              name=\"FrameSize\"\n              id=\"FrameSize\"\n              value={this.state.FrameSize}\n              onChange={\n                (event) => this.setState({ FrameSize: +event.target.value })\n              }\n            />\n          </label>\n          <label htmlFor=\"step\">\n            <span>Step</span>\n            <input\n              type=\"text\"\n              name=\"step\"\n              id=\"step\"\n              value={this.state.step}\n              onChange={\n                (event) => this.setState({ step: +event.target.value })\n              }\n            />\n          </label>\n          <label htmlFor=\"infinite\">\n            <span>infinite</span>\n            <input\n              type=\"checkbox\"\n              name=\"infinite\"\n              id=\"infinite\"\n              checked={this.state.infinite}\n              onChange={() => this.setState({ infinite: !infinite })}\n            />\n          </label>\n          <label htmlFor=\"animationDuration\">\n            <span>Animation Duration</span>\n            <input\n              type=\"text\"\n              name=\"animationDuration\"\n              id=\"animationDuration\"\n              value={this.state.animationDuration}\n              onChange={\n                (event) => this.setState(\n                  { animationDuration: +event.target.value },\n                )\n              }\n            />\n          </label>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}